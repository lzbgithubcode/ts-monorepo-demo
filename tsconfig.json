{

   "compilerOptions": {

       //Modules
       "moduleResolution": "node", // 指定模块解析策略：'node' （Node.js） 或 'classic' `classic不需要`
       "module":"esnext",  // 设置程序的模块系统 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
    

       // Emit
       "declaration": false,  // 如果设为true，编译每个ts文件之后会生成一个js文件和一个声明文件
       "declarationMap": false,     // 值为true或false，指定是否为声明文件.d.ts生成map文件
       "sourceMap": false,   // 用来指定编译时是否生成.map文件
       "removeComments": true,  // 编译的时候删除注释
       "outDir": "dist",  // 编译后的文件存到到哪个目录下,默认是每一个ts文件的当前目录

       // javaScript Support
       "allowJs": true,  // 允许编译JS
       "checkJs": true,   // 是否检测JS的语法

       // Language and Environment
       "lib": ["es5", "es6", "esnext","dom"], // 注入的库
       "target":"es5", // 与lib搭配使用 - 使用babel编译将无效

       // Compiler Diagnostics  
       "listEmittedFiles": true , // 打印出编译后生成文件的名字。
       "listFiles": true,   // 编译过程中打印文件名。


       //Interop Constraints
       "esModuleInterop": true,   // 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性

       // Type Checking
       "strict": false,    // 严格模式检测下面选项
       "alwaysStrict":  true,   // 使用js的严格模式,在每一个文件上部声明 use strict
       "noImplicitAny": true,   // 不允许变量或函数参数具有隐式any类型
       "noImplicitThis": false,  //  // 检测this是否隐式指定
       "strictBindCallApply": true,  // 严格检查bind call apply
       "strictNullChecks": true,    // null类型检测,const teacher: string = null;会报错
       "strictFunctionTypes": true,  // 对函数参数进行严格逆变比较
       "strictPropertyInitialization": true,  // 此规则将验证构造函数内部初始化前后已定义的属性。

        // 其他检测  
       "noImplicitReturns": false,  // 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示
       "noUnusedParameters": true, // 用于检查是否有在函数体中没有使用的参数
       "noUnusedLocals": true,  // 是否检测定义了但是没使用的变量
       "noFallthroughCasesInSwitch": true, //  // 用于检查switch中是否有case没有使用break跳出switch


   },
   "include": [
    "packages/*/src/"
  ],
}